import os
import time
import json
import string
import discord
import random
import asyncio
import operator
from discord.ext import commands

startup_extensions = ["fun", "administration" , "information", "monies"]
bot =commands.Bot(command_prefix ="?")


@bot.event
async def on_ready():
    print("bot is Online!, running version " + discord.__version__ + " of Discord.py")
    await asyncio.sleep(10)
    bot.remove_command("help")
    await bot.change_presence(game=discord.Game(name="Type ?help", type=1))

@bot.command(pass_context=True , help= 'to test if the bot is online')
async def ping(ctx):
    before = time.monotonic()
    await(await bot.ws.ping())
    after = time.monotonic()
    ping = str(round((after - before) * 1000))
    await bot.say("bots, __**Transform and Rollout!**__ {0}ms".format(ping))

numbers = "2" , "3" , "4" , "5" , "6" , "7" , "8" , "9" , "10" ,  'J' , "Q" , "K" , "A"
suits = ":hearts:" , ":spades:", ":clubs:" , ":diamonds:"
statistics = {":hearts:": 0, ":clubs:": 0, ":spade:": 0, ":diamond:": 0}
#random.choice(numbers) + random.choice(suits)

@bot.command(pass_context = True )
async def dmmeboi(ctx):
    await bot.send_message(ctx.message.author , "hey uwu" )

@bot.command(pass_context=True, hidden=True, help="Loads an extension")
async def load(ctx, extension_name : str):
    ext = extension_name.lower()
    if ctx.message.author.id == "197063788560777216": 
        try:
            bot.load_extension(ext)
        except (AttributeError, ImportError) as e:
            return await bot.say("```py\n{}: {}\n```".format(type(e).__name__, str(e)))
        except:
            return await bot.say("Extension {} not found".format(ext))
        await bot.say("{} loaded.".format(ext))
    else: return

@bot.command(pass_context=True, help="Unload an extension")
async def unload(ctx, extension_name : str):
    if ctx.message.author.id == "197063788560777216": 
        bot.unload_extension(extension_name.lower())
        await bot.say("{} unloaded.".format(extension_name.lower()))
@bot.command(pass_context = True, aliases = ["eval"], hidden = True)
async def gggggggggg(ctx):
    return

help_command = "\n**Administration:**\n role, purge, ban, kick, mute, unmute\n\n**Fun:**\nfancy, calculator, roll, suicide, mal, rps, illegal, rem, rolldice, playlist, eightball, say\n\n**Information:**\navatar, userid, remindme, serverinvite, nickname, invite\n\n**Gambling**\nflip, spin"
@bot.event
async def on_message(message):
    chan = message.channel
    con = message.content
    if con.startswith("<@332647811885694987>"):
        await bot.send_message(chan,"hey whats up")
    elif con.lower().startswith("?eval") and message.author.id == "USER_ID":
        try:
            before = time.monotonic()
            await(await bot.ws.ping())
            after = time.monotonic()
            ping = str(round((after - before) * 1000))
            split = "================================="
            await bot.send_message(chan , "evaluating...")
            await asyncio.sleep(1)
            await bot.send_message(chan,content="```py\nInput: {0}\n{1}\n".format(message.content[6:] , split) + "Output: " + str(eval(message.content[6:])) + "````type:" + str(eval.__name__) + "  eval time: {}ms".format(ping) +"`")
        except Exception as e:
            await bot.send_message(chan, "```py\n" + repr(e) + "```")

    if con.lower().startswith("?help"):
        if message.author.bot: return
        else:
            em = discord.Embed(title= "Autobot's Commands", description=help_command, colour=message.author.colour)
            em.set_thumbnail(url="https://cdn.discordapp.com/avatars/332647811885694987/1ecd035571e977075aae5efa33cba3fe.webp")
            em.set_author(name=message.author.name, icon_url=message.author.avatar_url)
            em.set_footer(text="Autobot", icon_url="https://cdn.discordapp.com/avatars/332647811885694987/1ecd035571e977075aae5efa33cba3fe.webp")
            await bot.send_message(message.channel, embed=em)
    await bot.process_commands(message)
    bot.remove_command("help")

            



if __name__ == "__main__":
    for extension in startup_extensions:
        try:
            bot.load_extension(extension.lower())
        except Exception as e:
            exc = '{}: {}'.format(type(e).__name__, e)
            print('Failed to load extension {}\n{}'.format(extension.lower(), exc))

bot.run("token")
